// Mocks generated by Mockito 5.4.4 from annotations
// in innoscripta_home_challenge/test/lib/domain/repository/comment/comments_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:innoscripta_home_challenge/domain/entity/comment/comment.dart'
    as _i2;
import 'package:innoscripta_home_challenge/domain/repository/comment/comments_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeComment_0 extends _i1.SmartFake implements _i2.Comment {
  _FakeComment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CommentsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentsRepository extends _i1.Mock
    implements _i3.CommentsRepository {
  MockCommentsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Comment> create(_i2.Comment? comment) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [comment],
        ),
        returnValue: _i4.Future<_i2.Comment>.value(_FakeComment_0(
          this,
          Invocation.method(
            #create,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.Comment>);

  @override
  _i4.Future<_i2.Comment> update(_i2.Comment? comment) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [comment],
        ),
        returnValue: _i4.Future<_i2.Comment>.value(_FakeComment_0(
          this,
          Invocation.method(
            #update,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.Comment>);

  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Comment> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i4.Future<_i2.Comment>.value(_FakeComment_0(
          this,
          Invocation.method(
            #get,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Comment>);

  @override
  _i4.Future<List<_i2.Comment>> getAllForTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForTask,
          [taskId],
        ),
        returnValue: _i4.Future<List<_i2.Comment>>.value(<_i2.Comment>[]),
      ) as _i4.Future<List<_i2.Comment>>);

  @override
  _i4.Future<List<_i2.Comment>> getAllForProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllForProject,
          [projectId],
        ),
        returnValue: _i4.Future<List<_i2.Comment>>.value(<_i2.Comment>[]),
      ) as _i4.Future<List<_i2.Comment>>);
}
